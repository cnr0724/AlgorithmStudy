비교정렬.
기초 알고리즘1의 알고리즘들(Heap, merge, insertion, selection, quick sort)은 비교연산을 통한 정렬.
(비교연산이란 두 개의 원소의 관계를 다음 중 하나로 판단하는 것.)
(a>b, a≥b, a=b, a≤b, a<b)
비교 정렬의 하한값(Lower bounds): 비교연산으로 정렬하는 방식은 아무리 빨라도 Ω(nlogn)보다는 느림.

계수정렬 알고리즘.
*계수정렬(Counting sort): 실제 숫자를 세는 방법으로 숫자가 몇 개인지 기록.
x라는 입력은 x보다 작은 원소의 개수가 (i-1)개라면 정렬 후 i번째에 위치해야 함.
(x보다 작은 원소의 개수는 원소의 개수를 세어 확인 가능.)
Count 배열에 input 배열의 원소들이 뭔지, 몇 개 있는지 기록->Count 배열을 바탕으로 정렬.
Ex) A={2, 5, 3, 0, 2, 3, 0, 3}이면 Count={2, 0, 2, 3, 0, 1}.
->A={0, 0, 2, 2, 3, 3, 3, 5}
for(int i=0;i<A.length;i++){
  count[a[i]]++;
}//A 배열로부터 Count 배열을 만드는 과정.
for(int i=A.length-1;i>=0;i--){
  b[count[a[i]]-1]=a[i];
  count[a[i]]--;
}//A 배열의 마지막 원소부터 0까지 가며 새 배열 B에 집어넣어줌.
계수정렬의 특징: 입력 배열의 순서가 정렬 후에도 유지됨.(Stable하다.)
계수정렬의 수도코드와 시간 복잡도.
COUNTING-SORT(A, B, k)
for i=0 to k
  C[]=0
for i=1 to A.length
  C[A[i]]=C[A[i]]+1
for i=1 to k
  C[i]=C[i]+C[i-1]
for i=A.length downto 1
  B[C[A[i]]]=A[i]
  C[A[i]]=C[A[i]]-1
25~26: Θ(k)
27~28: Θ(n)
29~30: Θ(k)
31~33: Θ(n)
[전체 수행시간은 Θ(k+n).(k는 입력되는 정수의 범위. 만약 k=O(n)이면 수행시간=Θ(n).)]
새 배열 b를 만들어 정렬하고, 들어오는 데이터 값 범위에 따라 count의 크기도 달라짐.
유리할 때: 동일한 값을 가지는 숫자들이 반복되며 count 배열이 작게 나오는 input.
*기수정렬(Radix sort):
가장 큰 자리의 값을 기준으로 정렬->다음 자리 정렬->...->정렬.(MSB->LSB)
LSB->MSB는 일의 자리부터 정렬한 뒤 십의 자리 정렬->...->정렬.
기수정렬의 수도코드:
RADIX-SORT(A, d)
for i=1 to d
  use a stable sort to sort array A on digit i
[기수정렬의 수행시간은 Θ(d(n+k)).]
d자리 수 숫자가 n개 주어졌을 때 각 자리 수에서 최대 k값을 가질 수 있다고 가정.
d가 상수이고 k=O(n)이므로 기수 정렬은 선형시간에 수행.

해쉬 알고리즘
Direct-address tables:
크기가 U(Universal Key)인 테이블 T를 생성해 key k를 slot k에 저장하는 방식.(중복되는 키 없다고 가정)
Direct-address table의 특징: 시간 복잡도 매우 빠름.(key값만 알고 있다면 데이터를 바로 불러올 수 있음)
하지만 공간 복잡도가 문제가 됨.(U만큼의 공간을 잡아놓고 총 k만큼의 공간만 사용하기 때문.)
Θ(U).
실제 공간 사용을 전체 공간으로 나눈 K/U를 적재율이라고 하는데, 만약 적재율이 낮으면 대부분의 공간은 낭비된다고 봄.
Hash-table:
Key k를 저장할 때 slot k에 저장하는 게 아니라 slot h(k)에 저장함.
Hash 함수=임의의 크기의 데이터를 받아 고정된 크기로 바꾸는 것.
수행시간 분석:
Insertion: O(l)
Deletion: O(l)
Search: O(l)
(l=리스트의 길이, slot은 항상 비어있고 linked list로 구현됨.)
충돌 문제 (Collision)
두 개의 key가 동일한 hash 값을 가질 때 충돌이 발생했다고 함.
충돌이 적은 좋은 해쉬 함수를 사용하는 것이 예방책.
체인을 이용한 충돌해결법: 중복되는 키값이 있을 경우 해당 slot을 linked list로 저장.
CHAINED-HASH-(INSERT/DELETE/SEARCH)
최악의 경우의 수행시간: Θ(n).(모든 key값 k가 하나의 slot으로 hashing되는 경우)
평균적인 경우의 수행시간: Θ(1+α).(α=적재율, α=(테이블의 원소 개수)/(slot 수))
->좋은 해쉬 함수는 모든 값이 골고루 나오는 것.
m개의 slot이 있을 때 중복 없이 확률적으로 m개의 slot에 골고루 나누어지는 것=simple
각각의 key는 다른 key의 해쉬값과 관계없이 hashing됨=uniformly
->simple uniform hashing.
해쉬 함수
The devision method: h(k)=k mod m
효율적인 m 선택: m!=2^n, (2^n)-1이도록.(m=2^p or (2^p)-1일 경우 key값 전체가 아니라 하위 비트에 영향을 받음.)

Open Addressing과 linear/ quadratic probing, 그리고 double hashing.
Open Addressing: Collision을 피하기 위한 다른 방법, key를 hash table에 직접 저장.(자료를 직접 기록.)
포인터를 사용하지 않으므로 구현이 간편하고 추가 메모리 공간 사용이 가능.
(빠르지만 여전히 collision이 있기 때문에 linear probing, quadratic probing, double hashing 등으로 최소화하는 게 중요.)

Linear Probing: 일반적인 해쉬 함수가 주어졌을 때 보조 해쉬 함수를 사용해 선형 프로빙을 함.
특정 조건이 주어졌을 때 선형 프로빙으로 key값을 테이블에 저장.
h(k, i) = (h'(k)+i) mod m
Ex) h(k)=k mod 13.
Collision이 발생하면 hash table의 다음 빈칸에 넣어둠.
key값을 찾을 때는 h(k)를 돌려서 k번째 slot의 원소를 찾아보고 거기 없으면 다음 slot을 찾아보길 반복.
해쉬 삽입/검색(linear probing 기준)의 수도코드:
HASH-INSERT(T, k)
  i=0
  repeat
    j=h(k, i)
    if T(j)==NIL
      T[j]=k
      return j
    else i=i+1
  until i==m
    error "hash table overflow"
HASH-SEARCH(T, k)
  i=0
  repeat
    j=h(k, i)
    if T(j)==k
      return j
      i=i+1
  until T[j]==NIL or i==m
    return NIL
해쉬 삭제:
삭제는 실제로 key값을 삭제하는 게 맞나?->실제로 값을 지우는 경우는 DELETED라고 표시.
(빈 slot이 삭제로 빈 것인지 원래 들어갈만한 값이 없었는지 구분할 수 없기 때문.
순차 검색에서 비어있는 공간이 나오면 그 이후는 찾기 않기 때문에 값이 있음에도 찾지 못할 수 있음.)
선형 프로빙 장단점:
구현은 쉽지만 primary clustering 문제가 있고, 값이 든 slot 수가 많으면 평균 검색시간이 증가한다.
(Primary clustering=key값을 넣을 빈 slot은 뭉친 slot의 끝부분에 존재하기 때문에 값이 든 slot은 뭉친 경우가 많음.

Quadratic probing(이차식 프로빙)
h(k, i) = (h'(k) +(c_1)i+(c_2)(i^2)) mod m 형태의 해쉬 함수를 사용.
(h'는 보조 해쉬 함수이고 c_1와 c_2는 0이 아닌 상수.)
이차식 프로빙의 단점:
두 key의 probe 값이 동일하다면 빈 slot을 찾는 과정이 동일하므로 같은 slot을 탐색하게 되는데,
이를 secondary clustering이라고 한다. (한번 충돌하면 빈 slot 나올 때까지 쭉 collision 남.)

Double Hashing
h(k, i) = (h_1(k)+i*h_2(k)) mod m
처음 탐색하는 위치는 T[h_1(k)]이고, 그 다음부터는 h_2(k) mod m만큼 이동하면서 탐색함.
이중 해싱의 주의점
*h_2(k)는 해쉬 테이블의 크기 m과 서로소 관계여야 함.*
위를 가능케 하는 가장 쉬운 방법은 m=2^p승으로 두고 h_2가 늘 홀수가 되게끔 하는 것이다.
or m=prime number, h_2를 m보다 작은 양수로 정할 수도 있음.
